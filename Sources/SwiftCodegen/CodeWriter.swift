//===----------------------------------------------------------------------===//
//
// This source file is part of the Cyllene open source project
//
// Copyright (c) 2017 Chris Daley
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
//
// See http://www.apache.org/licenses/LICENSE-2.0 for license information
//
//===----------------------------------------------------------------------===//

import Foundation

public class CodeWriter : CodeVisitor {

	var context: CodeContext
	
	var indent: Int = 0
	
	var bol: Bool = true

	var sourceFile: SourceFile? 
	
	public init(context: CodeContext) {
		self.context = context
	}


	public func writeFile(context:CodeContext, fileName: String) throws {

		
		let fileManager = FileManager.default
		var tempFileName = fileName
		let fileExists = fileManager.fileExists(atPath: fileName)
		
		if  fileExists {
			tempFileName = fileName + ".swifttmp"
		}
		
		writeString(string: "// Generated by SwiftCodegen")
		writeNewline()
		writeNewline()
		
		self.context = context
			
		self.context.accept(visitor: self)
		
		if fileExists {
			if fileManager.contentsEqual(atPath: fileName, andPath: tempFileName) {
				try fileManager.removeItem(atPath: tempFileName)
			} else {
				try fileManager.removeItem(atPath: fileName)
				try fileManager.moveItem(atPath: tempFileName, toPath: fileName)
			}
		}		

	}

	public func writeString(string: String) {
		sourceFile?.content += string
		bol = false
	}

	public func writeNewline() {
		sourceFile?.content += "\n"
		bol = true
		
	}
	
	
	public func visitClass(_ cls: Class) {
		
	}
	
	public func visitEnum(_ enm: Enum) {
		
	}
	
	public func visitProtocol(_ prtcl: Protocol) {
		
	}
	
	public func visitStruct(_ strct: Struct) {
		
	}

	public func visitImportDirective(_ directive: ImportDirective) {
		
	}

	public func visitConstructor(_ constructor: Constructor) {
		
	}
	
	public func visitDestructor(_ destructor: Destructor) {
		
	}

	public func visitPackage(_ package: Package) {
		if package.name == nil {
			package.acceptChildren(visitor: self)
			return
		}
		
		
		
	}
	
	public func visitParameter(_ param: Parameter) {
		
	}
	
	public func visitProperty(_ prop: Property) {
		
	}

	public func visitPropertyAccessory(_ accessor: PropertyAccessor) {
		
	}

	public func visitTypeParameter(_ param: TypeParameter) {
		
	}

	public func visitSourceFile(_ file: SourceFile) {

	}
}

enum CodeWriterError : Error {
	
	
}
