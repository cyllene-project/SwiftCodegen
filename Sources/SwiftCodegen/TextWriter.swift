//===----------------------------------------------------------------------===//
// TextWriter.swift
// 
// This source file is part of the Cyllene open source project
// https://github.com/cyllene-project
// 
// Copyright (c) 2018 Chris Daley <chebizarro@gmail.com>
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// 
// See http://www.apache.org/licenses/LICENSE-2.0 for license information
//
//===----------------------------------------------------------------------===//

public class TextWriter: CodeWriter {
		
	public var newLine: String = "\n"
	
	public var indentString: String = "\t"

	var context: CodeContext
	
	var indent: Int = 0
	
	var bol: Bool = true

	var sourceFile: SourceFile? 
	
	public init(context: CodeContext) {
		self.context = context
	}

	public func visit(_ node: CodeNode) {		
		node.emit(writer: self)
	}

	public func writeFile(file: SourceFile, fileName: String) {

		sourceFile = file
		let fileManager = FileManager.default
		var tempFileName = fileName
		let fileExists = fileManager.fileExists(atPath: fileName)
		
		if  fileExists {
			tempFileName = fileName + ".swifttmp"
		}
		
		writeString("// Generated by SwiftCodegen")
		writeNewline()
		writeNewline()
					
		sourceFile?.acceptChildren(visitor: self)
		
		do {
			try sourceFile?.write(toFile: tempFileName)
		} catch {
			
		}
		/*
		do {
			if fileExists {
				if fileManager.contentsEqual(atPath: fileName, andPath: tempFileName) {
					try fileManager.removeItem(atPath: tempFileName)
				} else {
					try fileManager.removeItem(atPath: fileName)
					try fileManager.moveItem(atPath: tempFileName, toPath: fileName)
				}
			}
		} catch {
		}*/

	}

	public func writeString(_ string: String) {
		sourceFile?.content += string
		bol = false
	}

	public func writeNewline() {
		sourceFile?.content += "\n"
		bol = true
	}
	
	func writeBeginBlock() {
		if !bol {
			writeString(" ")
		} else {
			writeIndent()
		}
		writeString("{")
		writeNewline()
		indent += 1
	}
	
	func writeEndBlock() {
		indent -= 1
		writeIndent()
		writeString("}")
		writeNewline()
	}

	func writeIndent() {
		if !bol {
			writeNewline()
		}
		
		for _ in 0..<indent {
			writeString(tab)
		}
		
		bol = false
	}

}